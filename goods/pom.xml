<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-parent</artifactId>
    <version>2.1.4.RELEASE</version>
    <relativePath/> <!-- lookup parent from repository -->
  </parent>
  <groupId>com.demon</groupId>
  <artifactId>goods</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>goods</name>
  <description>goods</description>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
    <java.version>11</java.version>
    <spring-cloud.version>Greenwich.SR1</spring-cloud.version>
    <alibaba-cloud.version>0.2.1.RELEASE</alibaba-cloud.version>
    <docker.repository>192.168.1.175:5000</docker.repository>
    <docker.namespace>junyundt</docker.namespace>
    <docker.image.name>${project.name}</docker.image.name>
    <docker.image.tag>dev</docker.image.tag>
  </properties>

  <dependencies>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-actuator</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-data-redis</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.cloud</groupId>
      <artifactId>spring-cloud-starter-openfeign</artifactId>
    </dependency>
    <dependency>
      <groupId>io.github.openfeign</groupId>
      <artifactId>feign-okhttp</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.cloud</groupId>
      <artifactId>spring-cloud-starter-sleuth</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.cloud</groupId>
      <artifactId>spring-cloud-starter-alibaba-nacos-config</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.cloud</groupId>
      <artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.cloud</groupId>
      <artifactId>spring-cloud-starter-alibaba-sentinel</artifactId>
    </dependency>

    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-devtools</artifactId>
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>org.projectlombok</groupId>
      <artifactId>lombok</artifactId>
      <optional>true</optional>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-test</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.commons</groupId>
      <artifactId>commons-pool2</artifactId>
    </dependency>
    <dependency>
      <groupId>com.demon</groupId>
      <artifactId>common-utils</artifactId>
      <version>0.2</version>
    </dependency>
    <dependency>
      <groupId>com.alibaba.nacos</groupId>
      <artifactId>nacos-client</artifactId>
      <version>0.9.0</version>
    </dependency>
    <dependency>
      <groupId>javax.xml.bind</groupId>
      <artifactId>jaxb-api</artifactId>
    </dependency>
  </dependencies>

  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>org.springframework.cloud</groupId>
        <artifactId>spring-cloud-dependencies</artifactId>
        <version>${spring-cloud.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
      <dependency>
        <groupId>org.springframework.cloud</groupId>
        <artifactId>spring-cloud-alibaba-dependencies</artifactId>
        <version>${alibaba-cloud.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <build>
    <finalName>${project.name}</finalName>
    <plugins>
      <plugin>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-maven-plugin</artifactId>
      </plugin>
      <plugin>
        <artifactId>maven-compiler-plugin</artifactId>
        <configuration>
          <source>11</source>
          <target>11</target>
        </configuration>
      </plugin>
      <plugin>
        <!-- 插件配置仓库地址 https://github.com/GoogleContainerTools/jib/tree/master/jib-maven-plugin -->
        <groupId>com.google.cloud.tools</groupId>
        <artifactId>jib-maven-plugin</artifactId>
        <version>1.0.2</version>
        <configuration>
          <!-- 选择初始镜像 -->
          <from>
            <image>adoptopenjdk/openjdk11:alpine-slim</image>
            <!-- 初始镜像镜像所在仓库如果需要登录此处设置账户密码 -->
            <!--            <auth>-->
            <!--              <username></username>-->
            <!--              <password></password>-->
            <!--            </auth>-->
          </from>
          <!-- 设置推送的镜像名称，需包括仓库地址 -->
          <to>
            <image>${dom4j.version}/${docker.namespace}/${docker.image.name}</image>
            <!-- 目标镜像镜像所在仓库如果需要登录此处设置账户密码 -->
            <!--            <auth>-->
            <!--              <username></username>-->
            <!--              <password></password>-->
            <!--            </auth>-->
            <!-- 目标镜像镜像的tag，默认包含 latest -->
            <tags>
              <tag>${docker.image.tag}</tag>
            </tags>
          </to>
          <container>
            <!-- 设置容器运行时jvm参数 -->
            <jvmFlags>
              <jvmFlag>-Djava.security.egd=file:/dev/./urandom</jvmFlag>
              <jvmFlag>-XX:+UseContainerSupport</jvmFlag>
              <jvmFlag>-Dfile.encoding=UTF-8</jvmFlag>
            </jvmFlags>
            <!-- 设置main方法所在的类名称 -->
            <mainClass>com.demon.goods.GoodsApplication</mainClass>
            <!-- 设置容器的开放的端口，等同于Dockerfile中的 EXPOSE -->
            <ports>
              <port>10010</port>
            </ports>
            <!-- 设置容器需要的环境变量，等同于Dockerfile中的ENV -->
            <environment>
              <env>dev</env>
              <!-- ..... -->
            </environment>
            <!-- 设置容器需要的标签，等同于Dockerfile中的LABEL -->
            <!--            <labels>-->
            <!--              <key1>value1</key1>-->
            <!--            </labels>-->
            <!-- 设置容器的数据卷，等同于Dockerfile中的 VOLUME -->
            <volumes>
              <volume>/opt/data</volume>
            </volumes>
            <useCurrentTimestamp>true</useCurrentTimestamp>
          </container>
          <!-- 私有非HTTPS仓库需添加该配置 -->
          <allowInsecureRegistries>true</allowInsecureRegistries>
        </configuration>
      </plugin>
    </plugins>
  </build>

</project>
